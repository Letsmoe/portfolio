---
import { CollectionEntry, getCollection } from "astro:content";
import Layout from "#layouts/Layout.astro";
import * as path from "path"
import { ArrowLeft, ArrowRight } from "radix-svelte-icons";
import moment, { type Moment } from "moment";

const currentStories: CollectionEntry<"blog">[] = await getCollection("blog", (entry) => {
	return entry.slug === path.basename(Astro.url.pathname);
});

if (currentStories.length == 0) {
	return Astro.redirect("/blog");
} 

const currentStory = currentStories[0];

const stories = await getCollection("blog");

function getClosestElements(array: CollectionEntry<"blog">[], target: Moment): [CollectionEntry<"blog">, CollectionEntry<"blog">] {
	let closestHigher: CollectionEntry<"blog"> = {data: {date: moment.max() }} as unknown as CollectionEntry<"blog">; // Initialize with highest possible value
	let closestLower: CollectionEntry<"blog"> = {data: {date: moment.min() }} as unknown as CollectionEntry<"blog">; // Initialize with lowest possible value

	for (let i = 0; i < array.length; i++) {
		let currentDate = moment(array[i].data.date);
		if (currentDate.isAfter(target) && currentDate < closestHigher.data.date) {
			closestHigher = array[i]; // Found a closer higher element
		} else if (currentDate.isBefore(target) && currentDate > closestLower.data.date) {
			closestLower = array[i]; // Found a closer lower element
		}
	}

	return [closestLower, closestHigher];
}

const { data, render } = currentStory;

const { Content } = await render();

const [last, next] = getClosestElements(stories, data.date);
---

<Layout title={data.title}>
	<main class="max-w-screen-xl w-full mx-auto px-4 mt-16 py-16">
		<div class="flex flex-row justify-between mb-8">
			<h1>{data.title}</h1>
			<a href="/blog" class="btn btn-primary">Home</a>
		</div>
		<Content></Content>
		<div class="flex flex-row justify-between mb-8">
			{last.slug && <a href={`/blog/${last.slug}`} class="btn btn-ghost"><ArrowLeft size={24}></ArrowLeft></a>}
			{next.slug && <a href={`/blog/${next.slug}`} class="btn btn-ghost"><ArrowRight size={24}></ArrowRight></a>}
		</div>
	</main>
</Layout>

<style is:global>
	img {
		@apply max-h-[600px] object-cover mx-auto rounded-lg;
	}

	p:has(img + img) > img {
		@apply w-full h-full;
	}

	/**
	 * Display images in a grid when there's more than one	
	*/
	p:has(img + img) {
		@apply grid grid-cols-2 gap-4;
	}

	p:has(img + img) > img {
		@apply border-0 !m-0;
	}

	p:has(img + img + img) {
		@apply grid grid-cols-2 gap-4;
	}
	p:has(img + img + img) > img + img + img {
		@apply col-span-2 w-full;
	}

	p:has(img + img + img + img) {
		@apply grid grid-cols-2 gap-4;
	}

	p:has(img + img + img + img) > img {
		@apply !m-0 border-0;
	}

	p:has(img + img + img + img + img + img) {
		@apply grid grid-cols-3 gap-4;
	}
</style>